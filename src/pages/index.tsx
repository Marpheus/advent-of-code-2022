import Head from "next/head";
import fs from "fs";
import readline from "readline";
import React from "react";
import { count3MostCalories, countMostCalories } from "../utils/day1";
import { countRPSScore, countRPSScoreCorrectly } from "../utils/day2";

type Props = {
  day1Input: string[];
  day2Input: string[];
  day3Input: string[];
};
const Home = (props: Props) => {
  return (
    <>
      <Head>
        <title>Advent of Code</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Advent of <span className="text-[hsl(280,100%,70%)]">Code</span>
          </h1>
        </div>
        <div className="container flex flex-col">
          <p className="pb-2 pt-2 text-2xl tracking-tight text-white">
            <span>Day 1, part 1: </span>
            <span>{countMostCalories(props.day1Input)}</span>
          </p>
          <p className="pb-2 pt-2  text-2xl tracking-tight text-white">
            <span>Day 1, part 2: </span>
            <span>{count3MostCalories(props.day1Input)}</span>
          </p>
          <hr />
          <p className="pb-2 pt-2 text-2xl tracking-tight text-white">
            <span>Day 2, part 1: </span>
            <span>{countRPSScore(props.day2Input)}</span>
          </p>
          <p className="pb-2 pt-2 text-2xl tracking-tight text-white">
            <span>Day 2, part 2: </span>
            <span>{countRPSScoreCorrectly(props.day2Input)}</span>
          </p>
          <hr />
        </div>
      </main>
    </>
  );
};

export default Home;

export async function getServerSideProps() {
  const loadInputFile = async (filePath: string) => {
    const input: string[] = [];
    const rl = readline.createInterface({
      input: fs.createReadStream(filePath),
      crlfDelay: Infinity,
    });
    rl.on("line", (line) => {
      input.push(line);
    });

    await new Promise((res) => rl.once("close", res));
    return input;
  };
  const day1Input: string[] = await loadInputFile("./src/inputs/day1.input");
  const day2Input: string[] = await loadInputFile("./src/inputs/day2.input");
  const day3Input: string[] = await loadInputFile("./src/inputs/day3.input");

  return {
    props: {
      day1Input,
      day2Input,
      day3Input,
    },
  };
}
